from pathlib import Path

import pytest
from django.core.management import call_command
from django.test.client import Client
from django.urls import reverse
from pytest_django.asserts import assertHTMLEqual, assertNumQueries
from pytest_django.fixtures import SettingsWrapper


parameters = [
    (
        "homepage.html",
        5,
        reverse("home"),
    ),
    (
        "version-detail.html",
        5,
        reverse("version-detail", kwargs={"version": "4.0"}),
    ),
    (
        "module-detail.html",
        7,
        reverse(
            "module-detail",
            kwargs={
                "version": "4.0",
                "module": "django.views.generic.edit",
            },
        ),
    ),
    (
        "klass-detail.html",
        30,
        reverse(
            "klass-detail",
            kwargs={
                "version": "4.0",
                "module": "django.views.generic.edit",
                "klass": "FormView",
            },
        ),
    ),
    (
        "klass-detail-old.html",
        30,
        reverse(
            "klass-detail",
            kwargs={
                "version": "3.2",
                "module": "django.views.generic.edit",
                "klass": "FormView",
            },
        ),
    ),
    # Detail pages with wRonGLY CasEd arGuMEnTs
    (
        "fuzzy-module-detail.html",
        9,
        reverse(
            "module-detail",
            kwargs={
                "version": "4.0",
                "module": "DJANGO.VIEWS.GENERIC.EDIT",
            },
        ),
    ),
    (
        "fuzzy-klass-detail.html",
        30,
        reverse(
            "klass-detail",
            kwargs={
                "version": "4.0",
                "module": "DJANGO.VIEWS.GENERIC.EDIT",
                "klass": "fORMvIEW",
            },
        ),
    ),
    (
        "fuzzy-klass-detail-old.html",
        30,
        reverse(
            "klass-detail",
            kwargs={
                "version": "3.2",
                "module": "django.VIEWS.generic.EDIT",
                "klass": "fOrMvIeW",
            },
        ),
    ),
]


@pytest.mark.parametrize(
    ["filename", "num_queries", "url"],
    parameters,
    ids=[
        "homepage",
        "version-detail.html",
        "module-detail.html",
        "klass-detail.html",
        "klass-detail-old.html",
        "fuzzy-module-detail.html",
        "fuzzy-klass-detail.html",
        "fuzzy-klass-detail-old.html",
    ],
)
@pytest.mark.django_db
def test_page_html(
    client: Client,
    settings: SettingsWrapper,
    tmp_path: Path,
    filename: str,
    num_queries: int,
    url: str,
) -> None:
    """
    Checks that the pages in the array above match the reference files in tests/_page_snapshots/.

    This test is intended to prevent regressions when refactoring views/templates.
    As well as ensuring the HTML hasn't materially changed,
    we also check the number of queries made when rendering the page.

    If the reference files legitimately need to change, they can be
    re-generated by temporarily uncommenting the appropriate lines at the
    bottom of the test.
    """
    # Load a couple of versions of Django.
    # It doesn't matter what they are, just that they stay consistent.
    call_command("loaddata", "3.2.json")
    call_command("loaddata", "4.0.json")

    # We set this so the subsequent call to collecstatic doesn't write to the
    # directory configured in settings.py
    settings.STATIC_ROOT = tmp_path

    # We call this so we can render the templates with a STATIC_URL and hash in
    # the path, to match what happens in production
    call_command("collectstatic", "--noinput")

    with assertNumQueries(num_queries):
        response = client.get(url)

    html = response.rendered_content
    path = Path("tests/_page_snapshots", filename)

    # Uncomment the below to re-generate the reference files when they need to
    # change for a legitimate reason.
    # DO NOT commit this uncommented!
    # path.write_text(html)

    expected = path.read_text()

    # This forces a useful error in the case of a mismatch.
    # We have to ignore the type because accessing __wrapped__ is pretty odd.
    assertHTMLEqual.__wrapped__.__self__.maxDiff = None  # type: ignore
    assertHTMLEqual(html, expected)
