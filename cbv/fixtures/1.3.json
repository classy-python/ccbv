[
 {
  "pk": null, 
  "model": "cbv.projectversion", 
  "fields": {
   "project": [
    "Django"
   ], 
   "version_number": "1.3"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.module", 
  "fields": {
   "project_version": [
    "Django", 
    "1.3"
   ], 
   "docstring": "", 
   "name": "django.views.generic", 
   "filename": "/django/views/generic/__init__.py"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.module", 
  "fields": {
   "project_version": [
    "Django", 
    "1.3"
   ], 
   "docstring": "", 
   "name": "django.views.generic.base", 
   "filename": "/django/views/generic/base.py"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.module", 
  "fields": {
   "project_version": [
    "Django", 
    "1.3"
   ], 
   "docstring": "", 
   "name": "django.views.generic.dates", 
   "filename": "/django/views/generic/dates.py"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.module", 
  "fields": {
   "project_version": [
    "Django", 
    "1.3"
   ], 
   "docstring": "", 
   "name": "django.views.generic.detail", 
   "filename": "/django/views/generic/detail.py"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.module", 
  "fields": {
   "project_version": [
    "Django", 
    "1.3"
   ], 
   "docstring": "", 
   "name": "django.views.generic.edit", 
   "filename": "/django/views/generic/edit.py"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.module", 
  "fields": {
   "project_version": [
    "Django", 
    "1.3"
   ], 
   "docstring": "", 
   "name": "django.views.generic.list", 
   "filename": "/django/views/generic/list.py"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.moduleattribute", 
  "fields": {
   "value": "<logging.Logger object at 0x953a92c>", 
   "name": "logger", 
   "module": [
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "line_number": -1
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.function", 
  "fields": {
   "line_number": 490, 
   "code": "def _date_from_string(year, year_format, month, month_format, day='', day_format='', delim='__'):\n    \"\"\"\n    Helper: get a datetime.date object given a format string and a year,\n    month, and possibly day; raise a 404 for an invalid date.\n    \"\"\"\n    format = delim.join((year_format, month_format, day_format))\n    datestr = delim.join((year, month, day))\n    try:\n        return datetime.date(*time.strptime(datestr, format)[:3])\n    except ValueError:\n        raise Http404(_(u\"Invalid date string '%(datestr)s' given format '%(format)s'\") % {\n            'datestr': datestr,\n            'format': format,\n        })\n", 
   "name": "_date_from_string", 
   "docstring": "Helper: get a datetime.date object given a format string and a year,\nmonth, and possibly day; raise a 404 for an invalid date.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "year, year_format, month, month_format, day='', day_format='', delim='__'"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.function", 
  "fields": {
   "line_number": 592, 
   "code": "def _date_lookup_for_field(field, date):\n    \"\"\"\n    Get the lookup kwargs for looking up a date against a given Field. If the\n    date field is a DateTimeField, we can't just do filter(df=date) because\n    that doesn't take the time into account. So we need to make a range lookup\n    in those cases.\n    \"\"\"\n    if isinstance(field, models.DateTimeField):\n        date_range = (\n            datetime.datetime.combine(date, datetime.time.min),\n            datetime.datetime.combine(date, datetime.time.max)\n        )\n        return {'%s__range' % field.name: date_range}\n    else:\n        return {field.name: date}\n", 
   "name": "_date_lookup_for_field", 
   "docstring": "Get the lookup kwargs for looking up a date against a given Field. If the\ndate field is a DateTimeField, we can't just do filter(df=date) because\nthat doesn't take the time into account. So we need to make a range lookup\nin those cases.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "field, date"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.function", 
  "fields": {
   "line_number": 519, 
   "code": "def _get_next_prev_month(generic_view, naive_result, is_previous, use_first_day):\n    \"\"\"\n    Helper: Get the next or the previous valid date. The idea is to allow\n    links on month/day views to never be 404s by never providing a date\n    that'll be invalid for the given view.\n\n    This is a bit complicated since it handles both next and previous months\n    and days (for MonthArchiveView and DayArchiveView); hence the coupling to generic_view.\n\n    However in essence the logic comes down to:\n\n        * If allow_empty and allow_future are both true, this is easy: just\n          return the naive result (just the next/previous day or month,\n          reguardless of object existence.)\n\n        * If allow_empty is true, allow_future is false, and the naive month\n          isn't in the future, then return it; otherwise return None.\n\n        * If allow_empty is false and allow_future is true, return the next\n          date *that contains a valid object*, even if it's in the future. If\n          there are no next objects, return None.\n\n        * If allow_empty is false and allow_future is false, return the next\n          date that contains a valid object. If that date is in the future, or\n          if there are no next objects, return None.\n\n    \"\"\"\n    date_field = generic_view.get_date_field()\n    allow_empty = generic_view.get_allow_empty()\n    allow_future = generic_view.get_allow_future()\n\n    # If allow_empty is True the naive value will be valid\n    if allow_empty:\n        result = naive_result\n\n    # Otherwise, we'll need to go to the database to look for an object\n    # whose date_field is at least (greater than/less than) the given\n    # naive result\n    else:\n        # Construct a lookup and an ordering depending on whether we're doing\n        # a previous date or a next date lookup.\n        if is_previous:\n            lookup = {'%s__lte' % date_field: naive_result}\n            ordering = '-%s' % date_field\n        else:\n            lookup = {'%s__gte' % date_field: naive_result}\n            ordering = date_field\n\n        qs = generic_view.get_queryset().filter(**lookup).order_by(ordering)\n\n        # Snag the first object from the queryset; if it doesn't exist that\n        # means there's no next/previous link available.\n        try:\n            result = getattr(qs[0], date_field)\n        except IndexError:\n            result = None\n\n    # Convert datetimes to a dates\n    if hasattr(result, 'date'):\n        result = result.date()\n\n    # For month views, we always want to have a date that's the first of the\n    # month for consistency's sake.\n    if result and use_first_day:\n        result = result.replace(day=1)\n\n    # Check against future dates.\n    if result and (allow_future or result < datetime.date.today()):\n        return result\n    else:\n        return None\n", 
   "name": "_get_next_prev_month", 
   "docstring": "Helper: Get the next or the previous valid date. The idea is to allow\nlinks on month/day views to never be 404s by never providing a date\nthat'll be invalid for the given view.\n\nThis is a bit complicated since it handles both next and previous months\nand days (for MonthArchiveView and DayArchiveView); hence the coupling to generic_view.\n\nHowever in essence the logic comes down to:\n\n    * If allow_empty and allow_future are both true, this is easy: just\n      return the naive result (just the next/previous day or month,\n      reguardless of object existence.)\n\n    * If allow_empty is true, allow_future is false, and the naive month\n      isn't in the future, then return it; otherwise return None.\n\n    * If allow_empty is false and allow_future is true, return the next\n      date *that contains a valid object*, even if it's in the future. If\n      there are no next objects, return None.\n\n    * If allow_empty is false and allow_future is false, return the next\n      date that contains a valid object. If that date is in the future, or\n      if there are no next objects, return None.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "generic_view, naive_result, is_previous, use_first_day"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.function", 
  "fields": {
   "line_number": 506, 
   "code": "def _month_bounds(date):\n    \"\"\"\n    Helper: return the first and last days of the month for the given date.\n    \"\"\"\n    first_day = date.replace(day=1)\n    if first_day.month == 12:\n        last_day = first_day.replace(year=first_day.year + 1, month=1)\n    else:\n        last_day = first_day.replace(month=first_day.month + 1)\n\n    return first_day, last_day\n", 
   "name": "_month_bounds", 
   "docstring": "Helper: return the first and last days of the month for the given date.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "date"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 10, 
   "name": "GenericViewError", 
   "docs_url": "http://django.readthedocs.org/en/1.3/ref/class-based-views.html#django.views.generic.dates.BaseTodayArchiveView", 
   "docstring": "A problem in a generic view.", 
   "module": [
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 126, 
   "name": "RedirectView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.base.RedirectView", 
   "docstring": "A view that provides a redirect on any GET request.", 
   "module": [
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 81, 
   "name": "TemplateResponseMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.base.TemplateResponseMixin", 
   "docstring": "A mixin that can be used to render a template.", 
   "module": [
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.base"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 112, 
   "name": "TemplateView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.base.TemplateView", 
   "docstring": "A view that renders a template.", 
   "module": [
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 12, 
   "name": "View", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.base.View", 
   "docstring": "Intentionally simple parent class for all views. Only implements\ndispatch-by-method and simple sanity checking.", 
   "module": [
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 253, 
   "name": "ArchiveIndexView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.ArchiveIndexView", 
   "docstring": "Top-level archive of date-based items.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 230, 
   "name": "BaseArchiveIndexView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseArchiveIndexView", 
   "docstring": "Base class for archives of date-based items.\n\nRequires a response mixin.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 447, 
   "name": "BaseDateDetailView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseDateDetailView", 
   "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 165, 
   "name": "BaseDateListView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseDateListView", 
   "docstring": "Abstract base class for date-based views display a list of objects.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 382, 
   "name": "BaseDayArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseDayArchiveView", 
   "docstring": "List of objects published on a given day.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 301, 
   "name": "BaseMonthArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseMonthArchiveView", 
   "docstring": "List of objects published in a given year.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 428, 
   "name": "BaseTodayArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseTodayArchiveView", 
   "docstring": "List of objects published today.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 340, 
   "name": "BaseWeekArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseWeekArchiveView", 
   "docstring": "List of objects published in a given week.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 260, 
   "name": "BaseYearArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.BaseYearArchiveView", 
   "docstring": "List of objects published in a given year.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 482, 
   "name": "DateDetailView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.DateDetailView", 
   "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 142, 
   "name": "DateMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.DateMixin", 
   "docstring": "Mixin class for views manipulating date-based data.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 421, 
   "name": "DayArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.DayArchiveView", 
   "docstring": "List of objects published on a given day.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 78, 
   "name": "DayMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.DayMixin", 
   "docstring": "", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 333, 
   "name": "MonthArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.MonthArchiveView", 
   "docstring": "List of objects published in a given year.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 37, 
   "name": "MonthMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.MonthMixin", 
   "docstring": "", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 440, 
   "name": "TodayArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.TodayArchiveView", 
   "docstring": "List of objects published today.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 375, 
   "name": "WeekArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.WeekArchiveView", 
   "docstring": "List of objects published in a given week.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 117, 
   "name": "WeekMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.WeekMixin", 
   "docstring": "", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 294, 
   "name": "YearArchiveView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.YearArchiveView", 
   "docstring": "List of objects published in a given year.", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 12, 
   "name": "YearMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.dates.YearMixin", 
   "docstring": "", 
   "module": [
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.dates"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 96, 
   "name": "BaseDetailView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.detail.BaseDetailView", 
   "docstring": "", 
   "module": [
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.detail"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 144, 
   "name": "DetailView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.detail.DetailView", 
   "docstring": "Render a \"detail\" view of an object.\n\nBy default this is a model instance looked up from `self.queryset`, but the\nview will support display of *any* object by overriding `self.get_object()`.", 
   "module": [
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 10, 
   "name": "SingleObjectMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.detail.SingleObjectMixin", 
   "docstring": "Provides the ability to retrieve a single object for further manipulation.", 
   "module": [
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.detail"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 103, 
   "name": "SingleObjectTemplateResponseMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.detail.SingleObjectTemplateResponseMixin", 
   "docstring": "", 
   "module": [
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.detail"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 160, 
   "name": "BaseCreateView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.BaseCreateView", 
   "docstring": "Base view for creating an new object instance.\n\nUsing this base class requires subclassing to provide a response mixin.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 229, 
   "name": "BaseDeleteView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.BaseDeleteView", 
   "docstring": "Base view for deleting an object.\n\nUsing this base class requires subclassing to provide a response mixin.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 148, 
   "name": "BaseFormView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.BaseFormView", 
   "docstring": "A base view for displaying a form", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 183, 
   "name": "BaseUpdateView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.BaseUpdateView", 
   "docstring": "Base view for updating an existing object.\n\nUsing this base class requires subclassing to provide a response mixin.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 175, 
   "name": "CreateView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.CreateView", 
   "docstring": "View for creating an new object instance,\nwith a response rendered by template.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 237, 
   "name": "DeleteView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.DeleteView", 
   "docstring": "View for deleting an object retrieved with `self.get_object()`,\nwith a response rendered by template.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 206, 
   "name": "DeletionMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.DeletionMixin", 
   "docstring": "A mixin providing the ability to delete objects", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 9, 
   "name": "FormMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.FormMixin", 
   "docstring": "A mixin that provides a way to show and handle a form in a request.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 154, 
   "name": "FormView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.FormView", 
   "docstring": "A view for displaying a form, and rendering a template response.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 66, 
   "name": "ModelFormMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.ModelFormMixin", 
   "docstring": "A mixin that provides a way to show and handle a modelform in a request.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 125, 
   "name": "ProcessFormView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.ProcessFormView", 
   "docstring": "A mixin that processes a form on POST.", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.edit"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 198, 
   "name": "UpdateView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.edit.UpdateView", 
   "docstring": "View for updating an object,\nwith a response rendered by template..", 
   "module": [
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 114, 
   "name": "BaseListView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.list.BaseListView", 
   "docstring": "", 
   "module": [
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.list"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 151, 
   "name": "ListView", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.list.ListView", 
   "docstring": "Render some list of objects, set by `self.model` or `self.queryset`.\n`self.queryset` can actually be any iterable of items, not just a queryset.", 
   "module": [
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 11, 
   "name": "MultipleObjectMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.list.MultipleObjectMixin", 
   "docstring": "", 
   "module": [
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.list"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klass", 
  "fields": {
   "line_number": 125, 
   "name": "MultipleObjectTemplateResponseMixin", 
   "docs_url": "http://docs.djangoproject.org/en/1.3/ref/class-based-views/#django.views.generic.list.MultipleObjectTemplateResponseMixin", 
   "docstring": "", 
   "module": [
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "import_path": "django.views.generic.list"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__delattr__' of 'exceptions.BaseException' objects>", 
   "name": "__delattr__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__getattribute__' of 'exceptions.BaseException' objects>", 
   "name": "__getattribute__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__getitem__' of 'exceptions.BaseException' objects>", 
   "name": "__getitem__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__getslice__' of 'exceptions.BaseException' objects>", 
   "name": "__getslice__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__init__' of 'exceptions.Exception' objects>", 
   "name": "__init__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<method '__reduce__' of 'exceptions.BaseException' objects>", 
   "name": "__reduce__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__repr__' of 'exceptions.BaseException' objects>", 
   "name": "__repr__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__setattr__' of 'exceptions.BaseException' objects>", 
   "name": "__setattr__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<method '__setstate__' of 'exceptions.BaseException' objects>", 
   "name": "__setstate__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<slot wrapper '__str__' of 'exceptions.BaseException' objects>", 
   "name": "__str__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<method '__unicode__' of 'exceptions.BaseException' objects>", 
   "name": "__unicode__"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "False", 
   "name": "allow_empty"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "value": "True", 
   "name": "allow_empty"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "DateMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "False", 
   "name": "allow_future"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<attribute 'args' of 'exceptions.BaseException' objects>", 
   "name": "args"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "BaseArchiveIndexView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'latest'", 
   "name": "context_object_name"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "context_object_name"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "context_object_name"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "DateMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "date_field"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "day"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'%d'", 
   "name": "day_format"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "form_class"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "value": "['get', 'post', 'put', 'delete', 'head', 'options', 'trace']", 
   "name": "http_method_names"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "value": "{}", 
   "name": "initial"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "BaseYearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "False", 
   "name": "make_object_list"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "GenericViewError", 
    "django.views.generic", 
    "Django", 
    "1.3"
   ], 
   "value": "<attribute 'message' of 'exceptions.BaseException' objects>", 
   "name": "message"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "model"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "model"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "month"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'%b'", 
   "name": "month_format"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "paginate_by"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": 12, 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "value": "<class 'django.core.paginator.Paginator'>", 
   "name": "paginator_class"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "RedirectView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "value": "True", 
   "name": "permanent"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "RedirectView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "value": "False", 
   "name": "query_string"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "queryset"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "queryset"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": 121, 
   "klass": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "value": "<class 'django.template.response.TemplateResponse'>", 
   "name": "response_class"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "value": "'slug'", 
   "name": "slug_field"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "DeletionMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "success_url"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "success_url"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "template_name"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "template_name_field"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "ArchiveIndexView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'_archive'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "DayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'_archive_day'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'_archive_month'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "TodayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'_archive_day'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "WeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'_archive_week'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "YearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'_archive_year'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "value": "'_detail'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "CreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "value": "'_form'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "DeleteView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "value": "'_confirm_delete'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "UpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "value": "'_form'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "value": "'_list'", 
   "name": "template_name_suffix"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "RedirectView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "url"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "WeekMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "week"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "WeekMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'%U'", 
   "name": "week_format"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "None", 
   "name": "year"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.klassattribute", 
  "fields": {
   "line_number": -1, 
   "klass": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "value": "'%Y'", 
   "name": "year_format"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 20, 
   "code": "def __init__(self, **kwargs):\n    \"\"\"\n    Constructor. Called in the URLconf; can contain helpful extra\n    keyword arguments, and other things.\n    \"\"\"\n    # Go through keyword arguments, and either save their values to our\n    # instance, or raise an error.\n    for key, value in kwargs.iteritems():\n        setattr(self, key, value)\n", 
   "name": "__init__", 
   "docstring": "Constructor. Called in the URLconf; can contain helpful extra\nkeyword arguments, and other things.", 
   "klass": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 400, 
   "code": "def _get_dated_items(self, date):\n    \"\"\"\n    Do the actual heavy lifting of getting the dated items; this accepts a\n    date object so that TodayArchiveView can be trivial.\n    \"\"\"\n    date_field = self.get_date_field()\n    field = self.get_queryset().model._meta.get_field(date_field)\n    lookup_kwargs = _date_lookup_for_field(field, date)\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {\n        'day': date,\n        'previous_day': self.get_previous_day(date),\n        'next_day': self.get_next_day(date),\n        'previous_month': self.get_previous_month(date),\n        'next_month': self.get_next_month(date)\n    })\n", 
   "name": "_get_dated_items", 
   "docstring": "Do the actual heavy lifting of getting the dated items; this accepts a\ndate object so that TodayArchiveView can be trivial.", 
   "klass": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, date"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 30, 
   "code": "@classonlymethod\ndef as_view(cls, **initkwargs):\n    \"\"\"\n    Main entry point for a request-response process.\n    \"\"\"\n    # sanitize keyword arguments\n    for key in initkwargs:\n        if key in cls.http_method_names:\n            raise TypeError(u\"You tried to pass in the %s method name as a \"\n                            u\"keyword argument to %s(). Don't do that.\"\n                            % (key, cls.__name__))\n        if not hasattr(cls, key):\n            raise TypeError(u\"%s() received an invalid keyword %r\" % (\n                cls.__name__, key))\n    def view(request, *args, **kwargs):\n        self = cls(**initkwargs)\n        return self.dispatch(request, *args, **kwargs)\n    # take name and docstring from class\n    update_wrapper(view, cls, updated=())\n    # and possible attributes set by decorators\n    # like csrf_exempt from dispatch\n    update_wrapper(view, cls.dispatch, assigned=())\n    return view\n", 
   "name": "as_view", 
   "docstring": "Main entry point for a request-response process.", 
   "klass": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "cls, **initkwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 212, 
   "code": "def delete(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    self.object.delete()\n    return HttpResponseRedirect(self.get_success_url())\n", 
   "name": "delete", 
   "docstring": "", 
   "klass": [
    "DeletionMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 57, 
   "code": "def dispatch(self, request, *args, **kwargs):\n    # Try to dispatch to the right method; if a method doesn't exist,\n    # defer to the error handler. Also defer to the error handler if the\n    # request method isn't on the approved list.\n    if request.method.lower() in self.http_method_names:\n        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)\n    else:\n        handler = self.http_method_not_allowed\n    self.request = request\n    self.args = args\n    self.kwargs = kwargs\n    return handler(request, *args, **kwargs)\n", 
   "name": "dispatch", 
   "docstring": "", 
   "klass": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 62, 
   "code": "def form_invalid(self, form):\n    return self.render_to_response(self.get_context_data(form=form))\n", 
   "name": "form_invalid", 
   "docstring": "", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, form"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 59, 
   "code": "def form_valid(self, form):\n    return HttpResponseRedirect(self.get_success_url())\n", 
   "name": "form_valid", 
   "docstring": "", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, form"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 111, 
   "code": "def form_valid(self, form):\n    self.object = form.save()\n    return super(ModelFormMixin, self).form_valid(form)\n", 
   "name": "form_valid", 
   "docstring": "", 
   "klass": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, form"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 150, 
   "code": "def get(self, request, *args, **kwargs):\n    url = self.get_redirect_url(**kwargs)\n    if url:\n        if self.permanent:\n            return http.HttpResponsePermanentRedirect(url)\n        else:\n            return http.HttpResponseRedirect(url)\n    else:\n        logger.warning('Gone: %s' % self.request.path,\n                    extra={\n                        'status_code': 410,\n                        'request': self.request\n                    })\n        return http.HttpResponseGone()\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "RedirectView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 121, 
   "code": "def get(self, request, *args, **kwargs):\n    context = self.get_context_data(**kwargs)\n    return self.render_to_response(context)\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "TemplateView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 171, 
   "code": "def get(self, request, *args, **kwargs):\n    self.date_list, self.object_list, extra_context = self.get_dated_items()\n    context = self.get_context_data(object_list=self.object_list,\n                                    date_list=self.date_list)\n    context.update(extra_context)\n    return self.render_to_response(context)\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 97, 
   "code": "def get(self, request, **kwargs):\n    self.object = self.get_object()\n    context = self.get_context_data(object=self.object)\n    return self.render_to_response(context)\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "BaseDetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 166, 
   "code": "def get(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).get(request, *args, **kwargs)\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "BaseCreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 189, 
   "code": "def get(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).get(request, *args, **kwargs)\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "BaseUpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 129, 
   "code": "def get(self, request, *args, **kwargs):\n    form_class = self.get_form_class()\n    form = self.get_form(form_class)\n    return self.render_to_response(self.get_context_data(form=form))\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "ProcessFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 115, 
   "code": "def get(self, request, *args, **kwargs):\n    self.object_list = self.get_queryset()\n    allow_empty = self.get_allow_empty()\n    if not allow_empty and len(self.object_list) == 0:\n        raise Http404(_(u\"Empty list and '%(class_name)s.allow_empty' is False.\")\n                      % {'class_name': self.__class__.__name__})\n    context = self.get_context_data(object_list=self.object_list)\n    return self.render_to_response(context)\n", 
   "name": "get", 
   "docstring": "", 
   "klass": [
    "BaseListView", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 68, 
   "code": "def get_allow_empty(self):\n    \"\"\"\n    Returns ``True`` if the view should display empty lists, and ``False``\n    if a 404 should be raised instead.\n    \"\"\"\n    return self.allow_empty\n", 
   "name": "get_allow_empty", 
   "docstring": "Returns ``True`` if the view should display empty lists, and ``False``\nif a 404 should be raised instead.", 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 157, 
   "code": "def get_allow_future(self):\n    \"\"\"\n    Returns `True` if the view should be allowed to display objects from\n    the future.\n    \"\"\"\n    return self.allow_future\n", 
   "name": "get_allow_future", 
   "docstring": "Returns `True` if the view should be allowed to display objects from\nthe future.", 
   "klass": [
    "DateMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 116, 
   "code": "def get_context_data(self, **kwargs):\n    return {\n        'params': kwargs\n    }\n", 
   "name": "get_context_data", 
   "docstring": "", 
   "klass": [
    "TemplateView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 220, 
   "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Get the context. Must return a Context (or subclass) instance.\n    \"\"\"\n    items = kwargs.pop('object_list')\n    context = super(BaseDateListView, self).get_context_data(object_list=items)\n    context.update(kwargs)\n    return context\n", 
   "name": "get_context_data", 
   "docstring": "Get the context. Must return a Context (or subclass) instance.", 
   "klass": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 88, 
   "code": "def get_context_data(self, **kwargs):\n    context = kwargs\n    context_object_name = self.get_context_object_name(self.object)\n    if context_object_name:\n        context[context_object_name] = self.object\n    return context\n", 
   "name": "get_context_data", 
   "docstring": "", 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 48, 
   "code": "def get_context_data(self, **kwargs):\n    return kwargs\n", 
   "name": "get_context_data", 
   "docstring": "", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 115, 
   "code": "def get_context_data(self, **kwargs):\n    context = kwargs\n    if self.object:\n        context['object'] = self.object\n        context_object_name = self.get_context_object_name(self.object)\n        if context_object_name:\n            context[context_object_name] = self.object\n    return context\n", 
   "name": "get_context_data", 
   "docstring": "", 
   "klass": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 86, 
   "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Get the context for this view.\n    \"\"\"\n    queryset = kwargs.pop('object_list')\n    page_size = self.get_paginate_by(queryset)\n    if page_size:\n        paginator, page, queryset, is_paginated = self.paginate_queryset(queryset, page_size)\n        context = {\n            'paginator': paginator,\n            'page_obj': page,\n            'is_paginated': is_paginated,\n            'object_list': queryset\n        }\n    else:\n        context = {\n            'paginator': None,\n            'page_obj': None,\n            'is_paginated': False,\n            'object_list': queryset\n        }\n    context.update(kwargs)\n    context_object_name = self.get_context_object_name(queryset)\n    if context_object_name is not None:\n        context[context_object_name] = queryset\n    return context\n", 
   "name": "get_context_data", 
   "docstring": "Get the context for this view.", 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 77, 
   "code": "def get_context_object_name(self, obj):\n    \"\"\"\n    Get the name to use for the object.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif hasattr(obj, '_meta'):\n        return smart_str(obj._meta.object_name.lower())\n    else:\n        return None\n", 
   "name": "get_context_object_name", 
   "docstring": "Get the name to use for the object.", 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, obj"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 75, 
   "code": "def get_context_object_name(self, object_list):\n    \"\"\"\n    Get the name of the item to be used in the context.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif hasattr(object_list, 'model'):\n        return smart_str('%s_list' % object_list.model._meta.object_name.lower())\n    else:\n        return None\n", 
   "name": "get_context_object_name", 
   "docstring": "Get the name of the item to be used in the context.", 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, object_list"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 149, 
   "code": "def get_date_field(self):\n    \"\"\"\n    Get the name of the date field to be used to filter by.\n    \"\"\"\n    if self.date_field is None:\n        raise ImproperlyConfigured(u\"%s.date_field is required.\" % self.__class__.__name__)\n    return self.date_field\n", 
   "name": "get_date_field", 
   "docstring": "Get the name of the date field to be used to filter by.", 
   "klass": [
    "DateMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 204, 
   "code": "def get_date_list(self, queryset, date_type):\n    \"\"\"\n    Get a date list by calling `queryset.dates()`, checking along the way\n    for empty lists that aren't allowed.\n    \"\"\"\n    date_field = self.get_date_field()\n    allow_empty = self.get_allow_empty()\n    date_list = queryset.dates(date_field, date_type)[::-1]\n    if date_list is not None and not date_list and not allow_empty:\n        raise Http404(_(u\"No %(verbose_name_plural)s available\") % {\n                'verbose_name_plural': force_unicode(qs.model._meta.verbose_name_plural)\n        })\n    return date_list\n", 
   "name": "get_date_list", 
   "docstring": "Get a date list by calling `queryset.dates()`, checking along the way\nfor empty lists that aren't allowed.", 
   "klass": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, queryset, date_type"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 238, 
   "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    qs = self.get_dated_queryset()\n    date_list = self.get_date_list(qs, 'year')\n    if date_list:\n        object_list = qs.order_by('-' + self.get_date_field())\n    else:\n        object_list = qs.none()\n    return (date_list, object_list, {})\n", 
   "name": "get_dated_items", 
   "docstring": "Return (date_list, items, extra_context) for this request.", 
   "klass": [
    "BaseArchiveIndexView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 178, 
   "code": "def get_dated_items(self):\n    \"\"\"\n    Obtain the list of dates and itesm\n    \"\"\"\n    raise NotImplementedError('A DateView must provide an implementation of get_dated_items()')\n", 
   "name": "get_dated_items", 
   "docstring": "Obtain the list of dates and itesm", 
   "klass": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 386, 
   "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    return self._get_dated_items(date)\n", 
   "name": "get_dated_items", 
   "docstring": "Return (date_list, items, extra_context) for this request.", 
   "klass": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 305, 
   "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    date_field = self.get_date_field()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format())\n    # Construct a date-range lookup.\n    first_day, last_day = _month_bounds(date)\n    lookup_kwargs = {\n        '%s__gte' % date_field: first_day,\n        '%s__lt' % date_field: last_day,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    date_list = self.get_date_list(qs, 'day')\n    return (date_list, qs, {\n        'month': date,\n        'next_month': self.get_next_month(date),\n        'previous_month': self.get_previous_month(date),\n    })\n", 
   "name": "get_dated_items", 
   "docstring": "Return (date_list, items, extra_context) for this request.", 
   "klass": [
    "BaseMonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 433, 
   "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    return self._get_dated_items(datetime.date.today())\n", 
   "name": "get_dated_items", 
   "docstring": "Return (date_list, items, extra_context) for this request.", 
   "klass": [
    "BaseTodayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 345, 
   "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    week = self.get_week()\n    date_field = self.get_date_field()\n    week_format = self.get_week_format()\n    week_start = {\n        '%W': '1',\n        '%U': '0',\n    }[week_format]\n    date = _date_from_string(year, self.get_year_format(),\n                             week_start, '%w',\n                             week, week_format)\n    # Construct a date-range lookup.\n    first_day = date\n    last_day = date + datetime.timedelta(days=7)\n    lookup_kwargs = {\n        '%s__gte' % date_field: first_day,\n        '%s__lt' % date_field: last_day,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {'week': date})\n", 
   "name": "get_dated_items", 
   "docstring": "Return (date_list, items, extra_context) for this request.", 
   "klass": [
    "BaseWeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 266, 
   "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    # Yes, no error checking: the URLpattern ought to validate this; it's\n    # an error if it doesn't.\n    year = self.get_year()\n    date_field = self.get_date_field()\n    qs = self.get_dated_queryset(**{date_field+'__year': year})\n    date_list = self.get_date_list(qs, 'month')\n    if self.get_make_object_list():\n        object_list = qs.order_by('-'+date_field)\n    else:\n        # We need this to be a queryset since parent classes introspect it\n        # to find information about the model.\n        object_list = qs.none()\n    return (date_list, object_list, {'year': year})\n", 
   "name": "get_dated_items", 
   "docstring": "Return (date_list, items, extra_context) for this request.", 
   "klass": [
    "BaseYearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 184, 
   "code": "def get_dated_queryset(self, **lookup):\n    \"\"\"\n    Get a queryset properly filtered according to `allow_future` and any\n    extra lookup kwargs.\n    \"\"\"\n    qs = self.get_queryset().filter(**lookup)\n    date_field = self.get_date_field()\n    allow_future = self.get_allow_future()\n    allow_empty = self.get_allow_empty()\n    if not allow_future:\n        qs = qs.filter(**{'%s__lte' % date_field: datetime.datetime.now()})\n    if not allow_empty and not qs:\n        raise Http404(_(u\"No %(verbose_name_plural)s available\") % {\n                'verbose_name_plural': force_unicode(qs.model._meta.verbose_name_plural)\n        })\n    return qs\n", 
   "name": "get_dated_queryset", 
   "docstring": "Get a queryset properly filtered according to `allow_future` and any\nextra lookup kwargs.", 
   "klass": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **lookup"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 89, 
   "code": "def get_day(self):\n    \"Return the day for which this view should display data\"\n    day = self.day\n    if day is None:\n        try:\n            day = self.kwargs['day']\n        except KeyError:\n            try:\n                day = self.request.GET['day']\n            except KeyError:\n                raise Http404(_(u\"No day specified\"))\n    return day\n", 
   "name": "get_day", 
   "docstring": "Return the day for which this view should display data", 
   "klass": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 82, 
   "code": "def get_day_format(self):\n    \"\"\"\n    Get a day format string in strptime syntax to be used to parse the day\n    from url variables.\n    \"\"\"\n    return self.day_format\n", 
   "name": "get_day_format", 
   "docstring": "Get a day format string in strptime syntax to be used to parse the day\nfrom url variables.", 
   "klass": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 30, 
   "code": "def get_form(self, form_class):\n    \"\"\"\n    Returns an instance of the form to be used in this view.\n    \"\"\"\n    return form_class(**self.get_form_kwargs())\n", 
   "name": "get_form", 
   "docstring": "Returns an instance of the form to be used in this view.", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, form_class"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 24, 
   "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view\n    \"\"\"\n    return self.form_class\n", 
   "name": "get_form_class", 
   "docstring": "Returns the form class to use in this view", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 71, 
   "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view\n    \"\"\"\n    if self.form_class:\n        return self.form_class\n    else:\n        if self.model is not None:\n            # If a model has been explicitly provided, use it\n            model = self.model\n        elif hasattr(self, 'object') and self.object is not None:\n            # If this view is operating on a single object, use\n            # the class of that object\n            model = self.object.__class__\n        else:\n            # Try to get a queryset and extract the model class\n            # from that\n            model = self.get_queryset().model\n        return model_forms.modelform_factory(model)\n", 
   "name": "get_form_class", 
   "docstring": "Returns the form class to use in this view", 
   "klass": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 36, 
   "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instanciating the form.\n    \"\"\"\n    kwargs = {'initial': self.get_initial()}\n    if self.request.method in ('POST', 'PUT'):\n        kwargs.update({\n            'data': self.request.POST,\n            'files': self.request.FILES,\n        })\n    return kwargs\n", 
   "name": "get_form_kwargs", 
   "docstring": "Returns the keyword arguments for instanciating the form.", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 91, 
   "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instanciating the form.\n    \"\"\"\n    kwargs = super(ModelFormMixin, self).get_form_kwargs()\n    kwargs.update({'instance': self.object})\n    return kwargs\n", 
   "name": "get_form_kwargs", 
   "docstring": "Returns the keyword arguments for instanciating the form.", 
   "klass": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 18, 
   "code": "def get_initial(self):\n    \"\"\"\n    Returns the initial data to use for forms on this view.\n    \"\"\"\n    return self.initial\n", 
   "name": "get_initial", 
   "docstring": "Returns the initial data to use for forms on this view.", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 286, 
   "code": "def get_make_object_list(self):\n    \"\"\"\n    Return `True` if this view should contain the full list of objects in\n    the given year.\n    \"\"\"\n    return self.make_object_list\n", 
   "name": "get_make_object_list", 
   "docstring": "Return `True` if this view should contain the full list of objects in\nthe given year.", 
   "klass": [
    "BaseYearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 48, 
   "code": "def get_month(self):\n    \"Return the month for which this view should display data\"\n    month = self.month\n    if month is None:\n        try:\n            month = self.kwargs['month']\n        except KeyError:\n            try:\n                month = self.request.GET['month']\n            except KeyError:\n                raise Http404(_(u\"No month specified\"))\n    return month\n", 
   "name": "get_month", 
   "docstring": "Return the month for which this view should display data", 
   "klass": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 41, 
   "code": "def get_month_format(self):\n    \"\"\"\n    Get a month format string in strptime syntax to be used to parse the\n    month from url variables.\n    \"\"\"\n    return self.month_format\n", 
   "name": "get_month_format", 
   "docstring": "Get a month format string in strptime syntax to be used to parse the\nmonth from url variables.", 
   "klass": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 102, 
   "code": "def get_next_day(self, date):\n    \"\"\"\n    Get the next valid day.\n    \"\"\"\n    next = date + datetime.timedelta(days=1)\n    return _get_next_prev_month(self, next, is_previous=False, use_first_day=False)\n", 
   "name": "get_next_day", 
   "docstring": "Get the next valid day.", 
   "klass": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, date"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 61, 
   "code": "def get_next_month(self, date):\n    \"\"\"\n    Get the next valid month.\n    \"\"\"\n    first_day, last_day = _month_bounds(date)\n    next = (last_day + datetime.timedelta(days=1)).replace(day=1)\n    return _get_next_prev_month(self, next, is_previous=False, use_first_day=True)\n", 
   "name": "get_next_month", 
   "docstring": "Get the next valid month.", 
   "klass": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, date"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 452, 
   "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Get the object this request displays.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    qs = self.get_queryset()\n    if not self.get_allow_future() and date > datetime.date.today():\n        raise Http404(_(u\"Future %(verbose_name_plural)s not available because %(class_name)s.allow_future is False.\") % {\n            'verbose_name_plural': qs.model._meta.verbose_name_plural,\n            'class_name': self.__class__.__name__,\n        })\n    # Filter down a queryset from self.queryset using the date from the\n    # URL. This'll get passed as the queryset to DetailView.get_object,\n    # which'll handle the 404\n    date_field = self.get_date_field()\n    field = qs.model._meta.get_field(date_field)\n    lookup = _date_lookup_for_field(field, date)\n    qs = qs.filter(**lookup)\n    return super(BaseDetailView, self).get_object(queryset=qs)\n", 
   "name": "get_object", 
   "docstring": "Get the object this request displays.", 
   "klass": [
    "BaseDateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, queryset=None"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 19, 
   "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Returns the object the view is displaying.\n    By default this requires `self.queryset` and a `pk` or `slug` argument\n    in the URLconf, but subclasses can override this to return any object.\n    \"\"\"\n    # Use a custom queryset if provided; this is required for subclasses\n    # like DateDetailView\n    if queryset is None:\n        queryset = self.get_queryset()\n    # Next, try looking up by primary key.\n    pk = self.kwargs.get('pk', None)\n    slug = self.kwargs.get('slug', None)\n    if pk is not None:\n        queryset = queryset.filter(pk=pk)\n    # Next, try looking up by slug.\n    elif slug is not None:\n        slug_field = self.get_slug_field()\n        queryset = queryset.filter(**{slug_field: slug})\n    # If none of those are defined, it's an error.\n    else:\n        raise AttributeError(u\"Generic detail view %s must be called with \"\n                             u\"either an object pk or a slug.\"\n                             % self.__class__.__name__)\n    try:\n        obj = queryset.get()\n    except ObjectDoesNotExist:\n        raise Http404(_(u\"No %(verbose_name)s found matching the query\") %\n                      {'verbose_name': queryset.model._meta.verbose_name})\n    return obj\n", 
   "name": "get_object", 
   "docstring": "Returns the object the view is displaying.\n\nBy default this requires `self.queryset` and a `pk` or `slug` argument\nin the URLconf, but subclasses can override this to return any object.", 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, queryset=None"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 56, 
   "code": "def get_paginate_by(self, queryset):\n    \"\"\"\n    Get the number of items to paginate by, or ``None`` for no pagination.\n    \"\"\"\n    return self.paginate_by\n", 
   "name": "get_paginate_by", 
   "docstring": "Get the number of items to paginate by, or ``None`` for no pagination.", 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, queryset"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 62, 
   "code": "def get_paginator(self, queryset, per_page, orphans=0, allow_empty_first_page=True):\n    \"\"\"\n    Return an instance of the paginator for this view.\n    \"\"\"\n    return self.paginator_class(queryset, per_page, orphans=orphans, allow_empty_first_page=allow_empty_first_page)\n", 
   "name": "get_paginator", 
   "docstring": "Return an instance of the paginator for this view.", 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, queryset, per_page, orphans=0, allow_empty_first_page=True"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 109, 
   "code": "def get_previous_day(self, date):\n    \"\"\"\n    Get the previous valid day.\n    \"\"\"\n    prev = date - datetime.timedelta(days=1)\n    return _get_next_prev_month(self, prev, is_previous=True, use_first_day=False)\n", 
   "name": "get_previous_day", 
   "docstring": "Get the previous valid day.", 
   "klass": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, date"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 69, 
   "code": "def get_previous_month(self, date):\n    \"\"\"\n    Get the previous valid month.\n    \"\"\"\n    first_day, last_day = _month_bounds(date)\n    prev = (first_day - datetime.timedelta(days=1))\n    return _get_next_prev_month(self, prev, is_previous=True, use_first_day=True)\n", 
   "name": "get_previous_month", 
   "docstring": "Get the previous valid month.", 
   "klass": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, date"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 55, 
   "code": "def get_queryset(self):\n    \"\"\"\n    Get the queryset to look an object up against. May not be called if\n    `get_object` is overridden.\n    \"\"\"\n    if self.queryset is None:\n        if self.model:\n            return self.model._default_manager.all()\n        else:\n            raise ImproperlyConfigured(u\"%(cls)s is missing a queryset. Define \"\n                                       u\"%(cls)s.model, %(cls)s.queryset, or override \"\n                                       u\"%(cls)s.get_object().\" % {\n                                            'cls': self.__class__.__name__\n                                    })\n    return self.queryset._clone()\n", 
   "name": "get_queryset", 
   "docstring": "Get the queryset to look an object up against. May not be called if\n`get_object` is overridden.", 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 19, 
   "code": "def get_queryset(self):\n    \"\"\"\n    Get the list of items for this view. This must be an interable, and may\n    be a queryset (in which qs-specific behavior will be enabled).\n    \"\"\"\n    if self.queryset is not None:\n        queryset = self.queryset\n        if hasattr(queryset, '_clone'):\n            queryset = queryset._clone()\n    elif self.model is not None:\n        queryset = self.model._default_manager.all()\n    else:\n        raise ImproperlyConfigured(u\"'%s' must define 'queryset' or 'model'\"\n                                   % self.__class__.__name__)\n    return queryset\n", 
   "name": "get_queryset", 
   "docstring": "Get the list of items for this view. This must be an interable, and may\nbe a queryset (in which qs-specific behavior will be enabled).", 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 134, 
   "code": "def get_redirect_url(self, **kwargs):\n    \"\"\"\n    Return the URL redirect to. Keyword arguments from the\n    URL pattern match generating the redirect request\n    are provided as kwargs to this method.\n    \"\"\"\n    if self.url:\n        args = self.request.META[\"QUERY_STRING\"]\n        if args and self.query_string:\n            url = \"%s?%s\" % (self.url, args)\n        else:\n            url = self.url\n        return url % kwargs\n    else:\n        return None\n", 
   "name": "get_redirect_url", 
   "docstring": "Return the URL redirect to. Keyword arguments from the\nURL pattern match generating the redirect request\nare provided as kwargs to this method.", 
   "klass": [
    "RedirectView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 71, 
   "code": "def get_slug_field(self):\n    \"\"\"\n    Get the name of a slug field to be used to look up by slug.\n    \"\"\"\n    return self.slug_field\n", 
   "name": "get_slug_field", 
   "docstring": "Get the name of a slug field to be used to look up by slug.", 
   "klass": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 221, 
   "code": "def get_success_url(self):\n    if self.success_url:\n        return self.success_url\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n", 
   "name": "get_success_url", 
   "docstring": "", 
   "klass": [
    "DeletionMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 51, 
   "code": "def get_success_url(self):\n    if self.success_url:\n        url = self.success_url\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n    return url\n", 
   "name": "get_success_url", 
   "docstring": "", 
   "klass": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 99, 
   "code": "def get_success_url(self):\n    if self.success_url:\n        url = self.success_url % self.object.__dict__\n    else:\n        try:\n            url = self.object.get_absolute_url()\n        except AttributeError:\n            raise ImproperlyConfigured(\n                \"No URL to redirect to.  Either provide a url or define\"\n                \" a get_absolute_url method on the Model.\")\n    return url\n", 
   "name": "get_success_url", 
   "docstring": "", 
   "klass": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 99, 
   "code": "def get_template_names(self):\n    \"\"\"\n    Returns a list of template names to be used for the request. Must return\n    a list. May not be called if render_to_response is overridden.\n    \"\"\"\n    if self.template_name is None:\n        raise ImproperlyConfigured(\n            \"TemplateResponseMixin requires either a definition of \"\n            \"'template_name' or an implementation of 'get_template_names()'\")\n    else:\n        return [self.template_name]\n", 
   "name": "get_template_names", 
   "docstring": "Returns a list of template names to be used for the request. Must return\na list. May not be called if render_to_response is overridden.", 
   "klass": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 107, 
   "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. Must return\n    a list. May not be called if get_template is overridden.\n    \"\"\"\n    try:\n        names = super(SingleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n    # If self.template_name_field is set, grab the value of the field\n    # of that name from the object; this is the most specific template\n    # name, if given.\n    if self.object and self.template_name_field:\n        name = getattr(self.object, self.template_name_field, None)\n        if name:\n            names.insert(0, name)\n    # The least-specific option is the default <app>/<model>_detail.html;\n    # only use this if the object in question is a model.\n    if hasattr(self.object, '_meta'):\n        names.append(\"%s/%s%s.html\" % (\n            self.object._meta.app_label,\n            self.object._meta.object_name.lower(),\n            self.template_name_suffix\n        ))\n    elif hasattr(self, 'model') and hasattr(self.model, '_meta'):\n        names.append(\"%s/%s%s.html\" % (\n            self.model._meta.app_label,\n            self.model._meta.object_name.lower(),\n            self.template_name_suffix\n        ))\n    return names\n", 
   "name": "get_template_names", 
   "docstring": "Return a list of template names to be used for the request. Must return\na list. May not be called if get_template is overridden.", 
   "klass": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 128, 
   "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. Must return\n    a list. May not be called if get_template is overridden.\n    \"\"\"\n    try:\n        names = super(MultipleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n    # If the list is a queryset, we'll invent a template name based on the\n    # app and model name. This name gets put at the end of the template\n    # name list so that user-supplied names override the automatically-\n    # generated ones.\n    if hasattr(self.object_list, 'model'):\n        opts = self.object_list.model._meta\n        names.append(\"%s/%s%s.html\" % (opts.app_label, opts.object_name.lower(), self.template_name_suffix))\n    return names\n", 
   "name": "get_template_names", 
   "docstring": "Return a list of template names to be used for the request. Must return\na list. May not be called if get_template is overridden.", 
   "klass": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 128, 
   "code": "def get_week(self):\n    \"Return the week for which this view should display data\"\n    week = self.week\n    if week is None:\n        try:\n            week = self.kwargs['week']\n        except KeyError:\n            try:\n                week = self.request.GET['week']\n            except KeyError:\n                raise Http404(_(u\"No week specified\"))\n    return week\n", 
   "name": "get_week", 
   "docstring": "Return the week for which this view should display data", 
   "klass": [
    "WeekMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 121, 
   "code": "def get_week_format(self):\n    \"\"\"\n    Get a week format string in strptime syntax to be used to parse the\n    week from url variables.\n    \"\"\"\n    return self.week_format\n", 
   "name": "get_week_format", 
   "docstring": "Get a week format string in strptime syntax to be used to parse the\nweek from url variables.", 
   "klass": [
    "WeekMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 23, 
   "code": "def get_year(self):\n    \"Return the year for which this view should display data\"\n    year = self.year\n    if year is None:\n        try:\n            year = self.kwargs['year']\n        except KeyError:\n            try:\n                year = self.request.GET['year']\n            except KeyError:\n                raise Http404(_(u\"No year specified\"))\n    return year\n", 
   "name": "get_year", 
   "docstring": "Return the year for which this view should display data", 
   "klass": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 16, 
   "code": "def get_year_format(self):\n    \"\"\"\n    Get a year format string in strptime syntax to be used to parse the\n    year from url variables.\n    \"\"\"\n    return self.year_format\n", 
   "name": "get_year_format", 
   "docstring": "Get a year format string in strptime syntax to be used to parse the\nyear from url variables.", 
   "klass": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 70, 
   "code": "def http_method_not_allowed(self, request, *args, **kwargs):\n    allowed_methods = [m for m in self.http_method_names if hasattr(self, m)]\n    logger.warning('Method Not Allowed (%s): %s' % (request.method, request.path),\n        extra={\n            'status_code': 405,\n            'request': self.request\n        }\n    )\n    return http.HttpResponseNotAllowed(allowed_methods)\n", 
   "name": "http_method_not_allowed", 
   "docstring": "", 
   "klass": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 35, 
   "code": "def paginate_queryset(self, queryset, page_size):\n    \"\"\"\n    Paginate the queryset, if needed.\n    \"\"\"\n    paginator = self.get_paginator(queryset, page_size, allow_empty_first_page=self.get_allow_empty())\n    page = self.kwargs.get('page') or self.request.GET.get('page') or 1\n    try:\n        page_number = int(page)\n    except ValueError:\n        if page == 'last':\n            page_number = paginator.num_pages\n        else:\n            raise Http404(_(u\"Page is not 'last', nor can it be converted to an int.\"))\n    try:\n        page = paginator.page(page_number)\n        return (paginator, page, page.object_list, page.has_other_pages())\n    except InvalidPage:\n        raise Http404(_(u'Invalid page (%(page_number)s)') % {\n                            'page_number': page_number\n        })\n", 
   "name": "paginate_queryset", 
   "docstring": "Paginate the queryset, if needed.", 
   "klass": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, queryset, page_size"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 170, 
   "code": "def post(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).post(request, *args, **kwargs)\n", 
   "name": "post", 
   "docstring": "", 
   "klass": [
    "BaseCreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 193, 
   "code": "def post(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).post(request, *args, **kwargs)\n", 
   "name": "post", 
   "docstring": "", 
   "klass": [
    "BaseUpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 218, 
   "code": "def post(self, *args, **kwargs):\n    return self.delete(*args, **kwargs)\n", 
   "name": "post", 
   "docstring": "", 
   "klass": [
    "DeletionMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 134, 
   "code": "def post(self, request, *args, **kwargs):\n    form_class = self.get_form_class()\n    form = self.get_form(form_class)\n    if form.is_valid():\n        return self.form_valid(form)\n    else:\n        return self.form_invalid(form)\n", 
   "name": "post", 
   "docstring": "", 
   "klass": [
    "ProcessFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, request, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 144, 
   "code": "def put(self, *args, **kwargs):\n    return self.post(*args, **kwargs)\n", 
   "name": "put", 
   "docstring": "", 
   "klass": [
    "ProcessFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, *args, **kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.method", 
  "fields": {
   "line_number": 88, 
   "code": "def render_to_response(self, context, **response_kwargs):\n    \"\"\"\n    Returns a response with a template rendered with the given context.\n    \"\"\"\n    return self.response_class(\n        request = self.request,\n        template = self.get_template_names(),\n        context = context,\n        **response_kwargs\n    )\n", 
   "name": "render_to_response", 
   "docstring": "Returns a response with a template rendered with the given context.", 
   "klass": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "kwargs": "self, context, **response_kwargs"
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "RedirectView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "TemplateView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "ArchiveIndexView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseArchiveIndexView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseMonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseTodayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseWeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "YearMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseYearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "MonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "TodayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "WeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "YearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseCreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "DeletionMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDeleteView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseUpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "CreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DeleteView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "FormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "FormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "ProcessFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "SingleObjectTemplateResponseMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "UpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseListView", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "ListView", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 0, 
   "parent": [
    "TemplateResponseMixin", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "MultipleObjectTemplateResponseMixin", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "TemplateView", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseArchiveIndexView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "ArchiveIndexView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "DateMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "MonthMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseMonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "WeekMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseWeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseYearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseDateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseMonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "MonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseTodayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "TodayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseWeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "WeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseYearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "YearArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseDetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "ProcessFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseCreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseDetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDeleteView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "ProcessFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "ProcessFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseUpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseCreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "CreateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseDeleteView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "DeleteView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseFormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "FormView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "SingleObjectMixin", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "ModelFormMixin", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseUpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "UpdateView", 
    "django.views.generic.edit", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseListView", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 1, 
   "parent": [
    "BaseListView", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "ListView", 
    "django.views.generic.list", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 2, 
   "parent": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 2, 
   "parent": [
    "View", 
    "django.views.generic.base", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 2, 
   "parent": [
    "DayMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 2, 
   "parent": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseMonthArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 2, 
   "parent": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseWeekArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 3, 
   "parent": [
    "DateMixin", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 3, 
   "parent": [
    "BaseDateListView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDayArchiveView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }, 
 {
  "pk": null, 
  "model": "cbv.inheritance", 
  "fields": {
   "order": 4, 
   "parent": [
    "BaseDetailView", 
    "django.views.generic.detail", 
    "Django", 
    "1.3"
   ], 
   "child": [
    "BaseDateDetailView", 
    "django.views.generic.dates", 
    "Django", 
    "1.3"
   ]
  }
 }
]